# Frontend-only Dockerfile using nginx
FROM node:18-alpine AS builder

RUN npm install -g pnpm

WORKDIR /app

# Copy package files
COPY package.json pnpm-workspace.yaml ./
COPY api/package.json ./api/
COPY frontend/package.json ./frontend/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY api/ ./api/
COPY frontend/ ./frontend/
COPY tsconfig.json ./

# Copy frontend .env file if it exists for build-time variables
COPY frontend/.env* ./frontend/ 2>/dev/null || true

# Build API and frontend
RUN pnpm -r --filter=@dashboard/api build
RUN pnpm -r --filter=@dashboard/frontend build

# Production stage with nginx
FROM nginx:alpine

# Copy built frontend files
COPY --from=builder /app/frontend/build /usr/share/nginx/html

# Copy nginx configuration
COPY <<EOF /etc/nginx/nginx.conf
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    server {
        listen       80;
        server_name  localhost;
        root         /usr/share/nginx/html;
        index        index.html;

        # Handle SPA routing
        location / {
            try_files \$uri \$uri/ /index.html;
        }

        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)\$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
}
EOF

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]